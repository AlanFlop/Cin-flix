{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState, mapActions } from 'vuex';\nimport MovieCard from '@/components/MovieCard.vue';\nimport Pagination from '@/components/Pagination.vue';\nexport default {\n  name: 'HomeView',\n  components: {\n    MovieCard,\n    Pagination\n  },\n  data() {\n    return {\n      currentSearchQuery: '',\n      isSearchMode: false\n    };\n  },\n  computed: {\n    ...mapState('movies', ['searchResults', 'searchLoading', 'searchError', 'popularMovies', 'popularLoading', 'popularError', 'totalResults', 'totalPages', 'currentPage'])\n  },\n  methods: {\n    ...mapActions('movies', ['searchMovies', 'fetchPopularMovies']),\n    retrySearch() {\n      if (this.currentSearchQuery) {\n        this.searchMovies({\n          query: this.currentSearchQuery,\n          page: 1\n        });\n      }\n    },\n    async changePage(page) {\n      if (this.isSearchMode) {\n        await this.searchMovies({\n          query: this.currentSearchQuery,\n          page\n        });\n      } else {\n        await this.loadPopularMovies(page);\n      }\n\n      // Remonter en haut de la page\n      window.scrollTo(0, 0);\n    },\n    async loadPopularMovies(page = 1) {\n      try {\n        await this.fetchPopularMovies({\n          page\n        });\n      } catch (error) {\n        console.error('Erreur lors du chargement des films populaires:', error);\n      }\n    },\n    goToMovie(id) {\n      this.$router.push({\n        name: 'movie',\n        params: {\n          id\n        }\n      });\n    }\n  },\n  created() {\n    // Vérifier s'il y a une requête de recherche dans l'URL\n    const queryParam = this.$route.query.q;\n    if (queryParam) {\n      // Si une requête est présente, mettre à jour l'état de recherche\n      this.currentSearchQuery = queryParam;\n      this.isSearchMode = true;\n\n      // Forcer une recherche si nécessaire\n      if (this.searchResults.length === 0 && !this.searchLoading) {\n        this.searchMovies({\n          query: queryParam,\n          page: 1\n        });\n      }\n    } else {\n      // Sinon, charger les films populaires\n      this.isSearchMode = false;\n      this.loadPopularMovies();\n    }\n  },\n  watch: {\n    // Surveiller les résultats de recherche pour mettre à jour l'interface\n    searchResults(newResults) {\n      if (newResults && newResults.length > 0) {\n        this.isSearchMode = true;\n      }\n    },\n    // Surveiller les changements dans les paramètres de l'URL\n    '$route.query.q'(newQuery) {\n      if (newQuery) {\n        this.currentSearchQuery = newQuery;\n        this.isSearchMode = true;\n      } else {\n        // Si le paramètre de recherche est retiré, revenir aux films populaires\n        this.isSearchMode = false;\n        this.currentSearchQuery = '';\n        this.loadPopularMovies();\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapActions","MovieCard","Pagination","name","components","data","currentSearchQuery","isSearchMode","computed","methods","retrySearch","searchMovies","query","page","changePage","loadPopularMovies","window","scrollTo","fetchPopularMovies","error","console","goToMovie","id","$router","push","params","created","queryParam","$route","q","searchResults","length","searchLoading","watch","newResults","$route.query.q","newQuery"],"sources":["/Users/alandelaigue/Desktop/cinema-v2/src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"home\">\n    <div v-if=\"searchLoading\" class=\"loading\">\n      <div class=\"spinner\"></div>\n      <p>Recherche des films...</p>\n    </div>\n    \n    <div v-else-if=\"searchError\" class=\"error-message\">\n      <p>{{ searchError }}</p>\n      <button @click=\"retrySearch\" class=\"btn\">Réessayer</button>\n    </div>\n    \n    <div v-else-if=\"isSearchMode && searchResults.length === 0\" class=\"no-results\">\n      <p>Aucun résultat trouvé pour \"{{ currentSearchQuery }}\"</p>\n    </div>\n    \n    <div v-else>\n      <!-- Résultats de recherche -->\n      <div v-if=\"isSearchMode\" class=\"search-results\">\n        <h2>Résultats pour \"{{ currentSearchQuery }}\"</h2>\n        <div class=\"movie-grid\">\n          <div v-for=\"movie in searchResults\" :key=\"movie.imdbID\" class=\"movie-item\">\n            <MovieCard :movie=\"movie\" @click=\"goToMovie(movie.imdbID)\" />\n          </div>\n        </div>\n        \n        <Pagination \n          v-if=\"totalPages > 1\" \n          :currentPage=\"currentPage\" \n          :totalPages=\"totalPages\" \n          @page-change=\"changePage\"\n        />\n      </div>\n      \n      <!-- Films populaires (affichés par défaut) -->\n      <div v-else class=\"popular-movies\">\n        <h2>Films populaires</h2>\n        <div v-if=\"popularLoading\" class=\"loading\">\n          <div class=\"spinner\"></div>\n          <p>Chargement des films populaires...</p>\n        </div>\n        \n        <div v-else-if=\"popularError\" class=\"error-message\">\n          <p>{{ popularError }}</p>\n          <button @click=\"loadPopularMovies\" class=\"btn\">Réessayer</button>\n        </div>\n        \n        <div v-else class=\"movie-grid\">\n          <div v-for=\"movie in popularMovies\" :key=\"movie.imdbID\" class=\"movie-item\">\n            <MovieCard :movie=\"movie\" @click=\"goToMovie(movie.imdbID)\" />\n          </div>\n        </div>\n        \n        <Pagination \n          v-if=\"totalPages > 1\" \n          :currentPage=\"currentPage\" \n          :totalPages=\"totalPages\" \n          @page-change=\"changePage\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport MovieCard from '@/components/MovieCard.vue'\nimport Pagination from '@/components/Pagination.vue'\n\nexport default {\n  name: 'HomeView',\n  components: {\n    MovieCard,\n    Pagination\n  },\n  data() {\n    return {\n      currentSearchQuery: '',\n      isSearchMode: false\n    }\n  },\n  computed: {\n    ...mapState('movies', [\n      'searchResults',\n      'searchLoading',\n      'searchError',\n      'popularMovies',\n      'popularLoading',\n      'popularError',\n      'totalResults',\n      'totalPages',\n      'currentPage'\n    ])\n  },\n  methods: {\n    ...mapActions('movies', [\n      'searchMovies',\n      'fetchPopularMovies'\n    ]),\n    \n    retrySearch() {\n      if (this.currentSearchQuery) {\n        this.searchMovies({ query: this.currentSearchQuery, page: 1 });\n      }\n    },\n    \n    async changePage(page) {\n      if (this.isSearchMode) {\n        await this.searchMovies({ query: this.currentSearchQuery, page });\n      } else {\n        await this.loadPopularMovies(page);\n      }\n      \n      // Remonter en haut de la page\n      window.scrollTo(0, 0);\n    },\n    \n    async loadPopularMovies(page = 1) {\n      try {\n        await this.fetchPopularMovies({ page });\n      } catch (error) {\n        console.error('Erreur lors du chargement des films populaires:', error);\n      }\n    },\n    \n    goToMovie(id) {\n      this.$router.push({ name: 'movie', params: { id } });\n    }\n  },\n  created() {\n    // Vérifier s'il y a une requête de recherche dans l'URL\n    const queryParam = this.$route.query.q;\n    \n    if (queryParam) {\n      // Si une requête est présente, mettre à jour l'état de recherche\n      this.currentSearchQuery = queryParam;\n      this.isSearchMode = true;\n      \n      // Forcer une recherche si nécessaire\n      if (this.searchResults.length === 0 && !this.searchLoading) {\n        this.searchMovies({ query: queryParam, page: 1 });\n      }\n    } else {\n      // Sinon, charger les films populaires\n      this.isSearchMode = false;\n      this.loadPopularMovies();\n    }\n  },\n  watch: {\n    // Surveiller les résultats de recherche pour mettre à jour l'interface\n    searchResults(newResults) {\n      if (newResults && newResults.length > 0) {\n        this.isSearchMode = true;\n      }\n    },\n    \n    // Surveiller les changements dans les paramètres de l'URL\n    '$route.query.q'(newQuery) {\n      if (newQuery) {\n        this.currentSearchQuery = newQuery;\n        this.isSearchMode = true;\n      } else {\n        // Si le paramètre de recherche est retiré, revenir aux films populaires\n        this.isSearchMode = false;\n        this.currentSearchQuery = '';\n        this.loadPopularMovies();\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.home {\n  width: 100%;\n}\n\n.movie-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 2rem;\n  margin-top: 2rem;\n}\n\n.movie-item {\n  height: 100%;\n}\n\n.search-results h2, .popular-movies h2 {\n  font-size: 1.8rem;\n  color: #333;\n  margin-bottom: 1rem;\n  border-bottom: 2px solid #e50914;\n  padding-bottom: 0.5rem;\n}\n\n.loading {\n  text-align: center;\n  padding: 3rem 0;\n}\n\n.spinner {\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 5px solid rgba(229, 9, 20, 0.3);\n  border-radius: 50%;\n  border-top-color: #e50914;\n  animation: spin 1s ease-in-out infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n.error-message, .no-results {\n  text-align: center;\n  padding: 3rem 0;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  margin-top: 2rem;\n}\n\n.error-message p, .no-results p {\n  margin-bottom: 1rem;\n  color: #666;\n}\n\n@media (max-width: 768px) {\n  .movie-grid {\n    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n    gap: 1.5rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .movie-grid {\n    grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));\n    gap: 1rem;\n  }\n}\n</style>"],"mappings":";AAiEA,SAASA,QAAQ,EAAEC,UAAS,QAAS,MAAK;AAC1C,OAAOC,SAAQ,MAAO,4BAA2B;AACjD,OAAOC,UAAS,MAAO,6BAA4B;AAEnD,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,UAAU,EAAE;IACVH,SAAS;IACTC;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,kBAAkB,EAAE,EAAE;MACtBC,YAAY,EAAE;IAChB;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGT,QAAQ,CAAC,QAAQ,EAAE,CACpB,eAAe,EACf,eAAe,EACf,aAAa,EACb,eAAe,EACf,gBAAgB,EAChB,cAAc,EACd,cAAc,EACd,YAAY,EACZ,aAAY,CACb;EACH,CAAC;EACDU,OAAO,EAAE;IACP,GAAGT,UAAU,CAAC,QAAQ,EAAE,CACtB,cAAc,EACd,oBAAmB,CACpB,CAAC;IAEFU,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACJ,kBAAkB,EAAE;QAC3B,IAAI,CAACK,YAAY,CAAC;UAAEC,KAAK,EAAE,IAAI,CAACN,kBAAkB;UAAEO,IAAI,EAAE;QAAE,CAAC,CAAC;MAChE;IACF,CAAC;IAED,MAAMC,UAAUA,CAACD,IAAI,EAAE;MACrB,IAAI,IAAI,CAACN,YAAY,EAAE;QACrB,MAAM,IAAI,CAACI,YAAY,CAAC;UAAEC,KAAK,EAAE,IAAI,CAACN,kBAAkB;UAAEO;QAAK,CAAC,CAAC;MACnE,OAAO;QACL,MAAM,IAAI,CAACE,iBAAiB,CAACF,IAAI,CAAC;MACpC;;MAEA;MACAG,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IACvB,CAAC;IAED,MAAMF,iBAAiBA,CAACF,IAAG,GAAI,CAAC,EAAE;MAChC,IAAI;QACF,MAAM,IAAI,CAACK,kBAAkB,CAAC;UAAEL;QAAK,CAAC,CAAC;MACzC,EAAE,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACzE;IACF,CAAC;IAEDE,SAASA,CAACC,EAAE,EAAE;MACZ,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAAErB,IAAI,EAAE,OAAO;QAAEsB,MAAM,EAAE;UAAEH;QAAG;MAAE,CAAC,CAAC;IACtD;EACF,CAAC;EACDI,OAAOA,CAAA,EAAG;IACR;IACA,MAAMC,UAAS,GAAI,IAAI,CAACC,MAAM,CAAChB,KAAK,CAACiB,CAAC;IAEtC,IAAIF,UAAU,EAAE;MACd;MACA,IAAI,CAACrB,kBAAiB,GAAIqB,UAAU;MACpC,IAAI,CAACpB,YAAW,GAAI,IAAI;;MAExB;MACA,IAAI,IAAI,CAACuB,aAAa,CAACC,MAAK,KAAM,KAAK,CAAC,IAAI,CAACC,aAAa,EAAE;QAC1D,IAAI,CAACrB,YAAY,CAAC;UAAEC,KAAK,EAAEe,UAAU;UAAEd,IAAI,EAAE;QAAE,CAAC,CAAC;MACnD;IACF,OAAO;MACL;MACA,IAAI,CAACN,YAAW,GAAI,KAAK;MACzB,IAAI,CAACQ,iBAAiB,CAAC,CAAC;IAC1B;EACF,CAAC;EACDkB,KAAK,EAAE;IACL;IACAH,aAAaA,CAACI,UAAU,EAAE;MACxB,IAAIA,UAAS,IAAKA,UAAU,CAACH,MAAK,GAAI,CAAC,EAAE;QACvC,IAAI,CAACxB,YAAW,GAAI,IAAI;MAC1B;IACF,CAAC;IAED;IACA,gBAAgB4B,CAACC,QAAQ,EAAE;MACzB,IAAIA,QAAQ,EAAE;QACZ,IAAI,CAAC9B,kBAAiB,GAAI8B,QAAQ;QAClC,IAAI,CAAC7B,YAAW,GAAI,IAAI;MAC1B,OAAO;QACL;QACA,IAAI,CAACA,YAAW,GAAI,KAAK;QACzB,IAAI,CAACD,kBAAiB,GAAI,EAAE;QAC5B,IAAI,CAACS,iBAAiB,CAAC,CAAC;MAC1B;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}