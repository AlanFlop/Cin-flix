{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '@/views/HomeView.vue';\nimport store from '@/store';\nconst routes = [{\n  path: '/',\n  name: 'home',\n  component: HomeView\n}, {\n  path: '/movie/:id',\n  name: 'movie',\n  component: () => import('../views/MovieView.vue')\n}, {\n  path: '/login',\n  name: 'login',\n  component: () => import('@/views/LoginView.vue'),\n  meta: {\n    guestOnly: true\n  }\n}, {\n  path: '/register',\n  name: 'register',\n  component: () => import('@/views/RegisterView.vue'),\n  meta: {\n    guestOnly: true\n  }\n}, {\n  path: '/cart',\n  name: 'cart',\n  component: () => import('@/views/CartView.vue')\n}, {\n  path: '/profile',\n  name: 'profile',\n  component: () => import('@/views/ProfileView.vue'),\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/:pathMatch(.*)*',\n  name: 'not-found',\n  redirect: {\n    name: 'home'\n  }\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n  scrollBehavior() {\n    // Toujours revenir en haut de la page lors d'un changement de route\n    return {\n      top: 0\n    };\n  }\n});\n\n// Navigation guards pour gérer l'authentification\nrouter.beforeEach((to, from, next) => {\n  const isLoggedIn = store.getters['auth/isLoggedIn'];\n\n  // Si la route nécessite une authentification et que l'utilisateur n'est pas connecté\n  if (to.meta.requiresAuth && !isLoggedIn) {\n    next({\n      name: 'login',\n      query: {\n        redirect: to.name,\n        id: to.params.id\n      }\n    });\n  }\n  // Si la route est réservée aux invités et que l'utilisateur est connecté\n  else if (to.meta.guestOnly && isLoggedIn) {\n    next({\n      name: 'home'\n    });\n  }\n  // Dans tous les autres cas, permettre la navigation\n  else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomeView","store","routes","path","name","component","meta","guestOnly","requiresAuth","redirect","router","history","process","env","BASE_URL","scrollBehavior","top","beforeEach","to","from","next","isLoggedIn","getters","query","id","params"],"sources":["/Users/alandelaigue/Desktop/cinema-v2/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router'\nimport HomeView from '@/views/HomeView.vue'\nimport store from '@/store'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'home',\n    component: HomeView\n  },\n  {\n    path: '/movie/:id',\n    name: 'movie',\n    component: () => import('../views/MovieView.vue')\n  },\n  {\n    path: '/login',\n    name: 'login',\n    component: () => import('@/views/LoginView.vue'),\n    meta: { guestOnly: true }\n  },\n  {\n    path: '/register',\n    name: 'register',\n    component: () => import('@/views/RegisterView.vue'),\n    meta: { guestOnly: true }\n  },\n  {\n    path: '/cart',\n    name: 'cart',\n    component: () => import('@/views/CartView.vue')\n  },\n  {\n    path: '/profile',\n    name: 'profile',\n    component: () => import('@/views/ProfileView.vue'),\n    meta: { requiresAuth: true }\n  },\n  {\n    path: '/:pathMatch(.*)*',\n    name: 'not-found',\n    redirect: { name: 'home' }\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n  scrollBehavior() {\n    // Toujours revenir en haut de la page lors d'un changement de route\n    return { top: 0 }\n  }\n})\n\n// Navigation guards pour gérer l'authentification\nrouter.beforeEach((to, from, next) => {\n  const isLoggedIn = store.getters['auth/isLoggedIn']\n  \n  // Si la route nécessite une authentification et que l'utilisateur n'est pas connecté\n  if (to.meta.requiresAuth && !isLoggedIn) {\n    next({ \n      name: 'login', \n      query: { redirect: to.name, id: to.params.id } \n    })\n  } \n  // Si la route est réservée aux invités et que l'utilisateur est connecté\n  else if (to.meta.guestOnly && isLoggedIn) {\n    next({ name: 'home' })\n  } \n  // Dans tous les autres cas, permettre la navigation\n  else {\n    next()\n  }\n})\n\nexport default router"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,KAAK,MAAM,SAAS;AAE3B,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEL;AACb,CAAC,EACD;EACEG,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,wBAAwB;AAClD,CAAC,EACD;EACEF,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,uBAAuB,CAAC;EAChDC,IAAI,EAAE;IAAEC,SAAS,EAAE;EAAK;AAC1B,CAAC,EACD;EACEJ,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,0BAA0B,CAAC;EACnDC,IAAI,EAAE;IAAEC,SAAS,EAAE;EAAK;AAC1B,CAAC,EACD;EACEJ,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,sBAAsB;AAChD,CAAC,EACD;EACEF,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,yBAAyB,CAAC;EAClDC,IAAI,EAAE;IAAEE,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,kBAAkB;EACxBC,IAAI,EAAE,WAAW;EACjBK,QAAQ,EAAE;IAAEL,IAAI,EAAE;EAAO;AAC3B,CAAC,CACF;AAED,MAAMM,MAAM,GAAGZ,YAAY,CAAC;EAC1Ba,OAAO,EAAEZ,gBAAgB,CAACa,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CZ,MAAM;EACNa,cAAcA,CAAA,EAAG;IACf;IACA,OAAO;MAAEC,GAAG,EAAE;IAAE,CAAC;EACnB;AACF,CAAC,CAAC;;AAEF;AACAN,MAAM,CAACO,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,UAAU,GAAGpB,KAAK,CAACqB,OAAO,CAAC,iBAAiB,CAAC;;EAEnD;EACA,IAAIJ,EAAE,CAACZ,IAAI,CAACE,YAAY,IAAI,CAACa,UAAU,EAAE;IACvCD,IAAI,CAAC;MACHhB,IAAI,EAAE,OAAO;MACbmB,KAAK,EAAE;QAAEd,QAAQ,EAAES,EAAE,CAACd,IAAI;QAAEoB,EAAE,EAAEN,EAAE,CAACO,MAAM,CAACD;MAAG;IAC/C,CAAC,CAAC;EACJ;EACA;EAAA,KACK,IAAIN,EAAE,CAACZ,IAAI,CAACC,SAAS,IAAIc,UAAU,EAAE;IACxCD,IAAI,CAAC;MAAEhB,IAAI,EAAE;IAAO,CAAC,CAAC;EACxB;EACA;EAAA,KACK;IACHgB,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeV,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}