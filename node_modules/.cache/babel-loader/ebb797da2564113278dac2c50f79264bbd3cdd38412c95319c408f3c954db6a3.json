{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'Pagination',\n  props: {\n    currentPage: {\n      type: Number,\n      required: true\n    },\n    totalPages: {\n      type: Number,\n      required: true\n    }\n  },\n  computed: {\n    // Calcule les numéros de page à afficher\n    visiblePages() {\n      const maxVisiblePages = 5;\n      let pages = [];\n\n      // Si le nombre total de pages est inférieur ou égal au nombre maximum de pages visibles\n      if (this.totalPages <= maxVisiblePages) {\n        for (let i = 1; i <= this.totalPages; i++) {\n          pages.push(i);\n        }\n      } else {\n        // Calcule les pages visibles en fonction de la page courante\n        let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));\n        let endPage = startPage + maxVisiblePages - 1;\n\n        // Ajuste les pages de début et de fin si nécessaire\n        if (endPage > this.totalPages) {\n          endPage = this.totalPages;\n          startPage = Math.max(1, endPage - maxVisiblePages + 1);\n        }\n        for (let i = startPage; i <= endPage; i++) {\n          pages.push(i);\n        }\n      }\n      return pages;\n    }\n  },\n  methods: {\n    changePage(page) {\n      if (page !== this.currentPage && page >= 1 && page <= this.totalPages) {\n        this.$emit('page-change', page);\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","currentPage","type","Number","required","totalPages","computed","visiblePages","maxVisiblePages","pages","i","push","startPage","Math","max","floor","endPage","methods","changePage","page","$emit"],"sources":["/Users/alandelaigue/Desktop/cinema-v2/src/components/Pagination.vue"],"sourcesContent":["<template>\n  <div class=\"pagination\">\n    <button \n      @click=\"changePage(currentPage - 1)\" \n      class=\"page-btn prev-btn\" \n      :disabled=\"currentPage === 1\"\n      title=\"Page précédente\"\n    >\n      &lsaquo;\n    </button>\n    \n    <div class=\"page-numbers\">\n      <button \n        v-for=\"page in visiblePages\" \n        :key=\"page\" \n        @click=\"changePage(page)\" \n        class=\"page-btn number-btn\"\n        :class=\"{ active: page === currentPage }\"\n      >\n        {{ page }}\n      </button>\n    </div>\n    \n    <button \n      @click=\"changePage(currentPage + 1)\" \n      class=\"page-btn next-btn\" \n      :disabled=\"currentPage === totalPages\"\n      title=\"Page suivante\"\n    >\n      &rsaquo;\n    </button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Pagination',\n  props: {\n    currentPage: {\n      type: Number,\n      required: true\n    },\n    totalPages: {\n      type: Number,\n      required: true\n    }\n  },\n  computed: {\n    // Calcule les numéros de page à afficher\n    visiblePages() {\n      const maxVisiblePages = 5;\n      let pages = [];\n      \n      // Si le nombre total de pages est inférieur ou égal au nombre maximum de pages visibles\n      if (this.totalPages <= maxVisiblePages) {\n        for (let i = 1; i <= this.totalPages; i++) {\n          pages.push(i);\n        }\n      } else {\n        // Calcule les pages visibles en fonction de la page courante\n        let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));\n        let endPage = startPage + maxVisiblePages - 1;\n        \n        // Ajuste les pages de début et de fin si nécessaire\n        if (endPage > this.totalPages) {\n          endPage = this.totalPages;\n          startPage = Math.max(1, endPage - maxVisiblePages + 1);\n        }\n        \n        for (let i = startPage; i <= endPage; i++) {\n          pages.push(i);\n        }\n      }\n      \n      return pages;\n    }\n  },\n  methods: {\n    changePage(page) {\n      if (page !== this.currentPage && page >= 1 && page <= this.totalPages) {\n        this.$emit('page-change', page);\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.pagination {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2rem 0;\n}\n\n.page-btn {\n  background-color: #f5f5f5;\n  border: 1px solid #ddd;\n  color: #333;\n  padding: 0.5rem 0.8rem;\n  margin: 0 0.2rem;\n  cursor: pointer;\n  transition: all 0.3s;\n  border-radius: 4px;\n}\n\n.page-btn:hover:not(:disabled) {\n  background-color: #e0e0e0;\n}\n\n.page-btn.active {\n  background-color: #e50914;\n  color: white;\n  border-color: #e50914;\n}\n\n.page-btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.page-numbers {\n  display: flex;\n  margin: 0 0.5rem;\n}\n\n@media (max-width: 576px) {\n  .page-btn {\n    padding: 0.4rem 0.6rem;\n    font-size: 0.9rem;\n  }\n}\n</style>"],"mappings":";AAmCA,eAAe;EACbA,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE;IACLC,WAAW,EAAE;MACXC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,UAAU,EAAE;MACVH,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDE,QAAQ,EAAE;IACR;IACAC,YAAYA,CAAA,EAAG;MACb,MAAMC,eAAc,GAAI,CAAC;MACzB,IAAIC,KAAI,GAAI,EAAE;;MAEd;MACA,IAAI,IAAI,CAACJ,UAAS,IAAKG,eAAe,EAAE;QACtC,KAAK,IAAIE,CAAA,GAAI,CAAC,EAAEA,CAAA,IAAK,IAAI,CAACL,UAAU,EAAEK,CAAC,EAAE,EAAE;UACzCD,KAAK,CAACE,IAAI,CAACD,CAAC,CAAC;QACf;MACF,OAAO;QACL;QACA,IAAIE,SAAQ,GAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACb,WAAU,GAAIY,IAAI,CAACE,KAAK,CAACP,eAAc,GAAI,CAAC,CAAC,CAAC;QAC/E,IAAIQ,OAAM,GAAIJ,SAAQ,GAAIJ,eAAc,GAAI,CAAC;;QAE7C;QACA,IAAIQ,OAAM,GAAI,IAAI,CAACX,UAAU,EAAE;UAC7BW,OAAM,GAAI,IAAI,CAACX,UAAU;UACzBO,SAAQ,GAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEE,OAAM,GAAIR,eAAc,GAAI,CAAC,CAAC;QACxD;QAEA,KAAK,IAAIE,CAAA,GAAIE,SAAS,EAAEF,CAAA,IAAKM,OAAO,EAAEN,CAAC,EAAE,EAAE;UACzCD,KAAK,CAACE,IAAI,CAACD,CAAC,CAAC;QACf;MACF;MAEA,OAAOD,KAAK;IACd;EACF,CAAC;EACDQ,OAAO,EAAE;IACPC,UAAUA,CAACC,IAAI,EAAE;MACf,IAAIA,IAAG,KAAM,IAAI,CAAClB,WAAU,IAAKkB,IAAG,IAAK,KAAKA,IAAG,IAAK,IAAI,CAACd,UAAU,EAAE;QACrE,IAAI,CAACe,KAAK,CAAC,aAAa,EAAED,IAAI,CAAC;MACjC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}