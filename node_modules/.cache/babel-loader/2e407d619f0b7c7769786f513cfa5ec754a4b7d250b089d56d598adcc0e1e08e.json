{"ast":null,"code":"import { mapState, mapActions } from 'vuex';\nexport default {\n  name: 'LoginForm',\n  data() {\n    return {\n      credentials: {\n        email: '',\n        password: ''\n      }\n    };\n  },\n  computed: {\n    ...mapState('auth', ['error', 'isLoggingIn'])\n  },\n  methods: {\n    ...mapActions('auth', ['login', 'clearAuthError']),\n    async handleLogin() {\n      console.log('Tentative de connexion avec:', this.credentials.email);\n\n      // Effacer les erreurs précédentes\n      this.clearAuthError();\n      try {\n        // Appeler l'action login du module auth\n        const response = await this.login(this.credentials);\n        console.log('Connexion réussie, émission de l\\'événement login-success');\n\n        // Important: émettre l'événement que LoginView attend\n        this.$emit('login-success');\n        return response;\n      } catch (error) {\n        console.error('Erreur lors de la connexion:', error);\n        // L'erreur est déjà gérée par l'action login qui met à jour le state\n      }\n    }\n  },\n  created() {\n    // Effacer les erreurs au chargement du composant\n    this.clearAuthError();\n  }\n};","map":{"version":3,"names":["mapState","mapActions","name","data","credentials","email","password","computed","methods","handleLogin","console","log","clearAuthError","response","login","$emit","error","created"],"sources":["/Users/alandelaigue/Desktop/cinema-v2/src/components/LoginForm.vue"],"sourcesContent":["<template>\n  <div class=\"login-form\">\n    <div v-if=\"error\" class=\"alert alert-error\">\n      {{ error }}\n    </div>\n    \n    <form @submit.prevent=\"handleLogin\">\n      <div class=\"form-group\">\n        <label for=\"email\">Email</label>\n        <input \n          type=\"email\" \n          id=\"email\" \n          v-model=\"credentials.email\" \n          class=\"form-control\" \n          required\n        />\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"password\">Mot de passe</label>\n        <input \n          type=\"password\" \n          id=\"password\" \n          v-model=\"credentials.password\" \n          class=\"form-control\" \n          required\n        />\n      </div>\n      \n      <div class=\"form-actions\">\n        <button type=\"submit\" class=\"btn primary\" :disabled=\"isLoggingIn\">\n          {{ isLoggingIn ? 'Connexion en cours...' : 'Se connecter' }}\n        </button>\n        <router-link to=\"/reset-password\" class=\"forgot-password\">\n          Mot de passe oublié ?\n        </router-link>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex';\n\nexport default {\n  name: 'LoginForm',\n  data() {\n    return {\n      credentials: {\n        email: '',\n        password: ''\n      }\n    };\n  },\n  computed: {\n    ...mapState('auth', ['error', 'isLoggingIn'])\n  },\n  methods: {\n    ...mapActions('auth', ['login', 'clearAuthError']),\n    \n    async handleLogin() {\n      console.log('Tentative de connexion avec:', this.credentials.email);\n      \n      // Effacer les erreurs précédentes\n      this.clearAuthError();\n      \n      try {\n        // Appeler l'action login du module auth\n        const response = await this.login(this.credentials);\n        \n        console.log('Connexion réussie, émission de l\\'événement login-success');\n        \n        // Important: émettre l'événement que LoginView attend\n        this.$emit('login-success');\n        \n        return response;\n      } catch (error) {\n        console.error('Erreur lors de la connexion:', error);\n        // L'erreur est déjà gérée par l'action login qui met à jour le state\n      }\n    }\n  },\n  created() {\n    // Effacer les erreurs au chargement du composant\n    this.clearAuthError();\n  }\n};\n</script>\n\n<style scoped>\n.login-form {\n  width: 100%;\n}\n\n.form-group {\n  margin-bottom: 1.5rem;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #333;\n}\n\n.form-control {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.form-control:focus {\n  outline: none;\n  border-color: #e50914;\n  box-shadow: 0 0 0 3px rgba(229, 9, 20, 0.1);\n}\n\n.form-actions {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 2rem;\n}\n\n.btn {\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 4px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.btn.primary {\n  background-color: #e50914;\n  color: white;\n}\n\n.btn.primary:hover {\n  background-color: #f40612;\n}\n\n.btn:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n}\n\n.forgot-password {\n  color: #666;\n  text-decoration: none;\n  font-size: 0.9rem;\n}\n\n.forgot-password:hover {\n  color: #e50914;\n  text-decoration: underline;\n}\n\n.alert {\n  padding: 1rem;\n  border-radius: 4px;\n  margin-bottom: 1.5rem;\n  font-weight: 500;\n}\n\n.alert-error {\n  background-color: #feeeed;\n  color: #e50914;\n  border: 1px solid #fcd0cd;\n}\n</style>"],"mappings":"AA0CA,SAASA,QAAQ,EAAEC,UAAS,QAAS,MAAM;AAE3C,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE;QACXC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACZ;IACF,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGP,QAAQ,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC;EAC9C,CAAC;EACDQ,OAAO,EAAE;IACP,GAAGP,UAAU,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;IAElD,MAAMQ,WAAWA,CAAA,EAAG;MAClBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE,IAAI,CAACP,WAAW,CAACC,KAAK,CAAC;;MAEnE;MACA,IAAI,CAACO,cAAc,CAAC,CAAC;MAErB,IAAI;QACF;QACA,MAAMC,QAAO,GAAI,MAAM,IAAI,CAACC,KAAK,CAAC,IAAI,CAACV,WAAW,CAAC;QAEnDM,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;;QAExE;QACA,IAAI,CAACI,KAAK,CAAC,eAAe,CAAC;QAE3B,OAAOF,QAAQ;MACjB,EAAE,OAAOG,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD;MACF;IACF;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACL,cAAc,CAAC,CAAC;EACvB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}