{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions } from 'vuex';\nexport default {\n  name: 'SearchBar',\n  data() {\n    return {\n      searchQuery: ''\n    };\n  },\n  methods: {\n    ...mapActions({\n      searchMovies: 'movies/searchMovies'\n    }),\n    async search() {\n      if (this.searchQuery.trim()) {\n        // Exécuter l'action de recherche avec page 1\n        await this.searchMovies({\n          query: this.searchQuery,\n          page: 1\n        });\n\n        // Si l'utilisateur n'est pas déjà sur la page d'accueil, rediriger\n        if (this.$route.path !== '/') {\n          this.$router.push({\n            path: '/',\n            query: {\n              q: this.searchQuery\n            }\n          });\n        } else {\n          // Mettre à jour l'URL avec le paramètre de recherche sans recharger la page\n          this.$router.replace({\n            query: {\n              q: this.searchQuery\n            }\n          });\n        }\n      }\n    }\n  },\n  async created() {\n    // Récupérer la recherche depuis l'URL si elle existe\n    const queryParam = this.$route.query.q;\n    if (queryParam) {\n      this.searchQuery = queryParam;\n\n      // Exécuter la recherche automatiquement si on est sur la page d'accueil\n      if (this.$route.path === '/') {\n        await this.searchMovies({\n          query: this.searchQuery,\n          page: 1\n        });\n      }\n    }\n  },\n  watch: {\n    // Surveiller les changements dans l'URL et mettre à jour la barre de recherche\n    '$route.query.q'(newQuery) {\n      if (newQuery) {\n        this.searchQuery = newQuery;\n      } else {\n        // Réinitialiser la recherche si le paramètre est supprimé\n        this.searchQuery = '';\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapActions","name","data","searchQuery","methods","searchMovies","search","trim","query","page","$route","path","$router","push","q","replace","created","queryParam","watch","$route.query.q","newQuery"],"sources":["/Users/alandelaigue/Desktop/cinema-v2/src/components/SearchBar.vue"],"sourcesContent":["<template>\n  <div class=\"search-bar\">\n    <input \n      type=\"text\" \n      v-model=\"searchQuery\" \n      @keyup.enter=\"search\"\n      placeholder=\"Rechercher un film...\" \n      class=\"search-input\"\n    />\n    <button @click=\"search\" class=\"search-button\">\n      <span class=\"search-icon\">&#128269;</span>\n    </button>\n  </div>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\n\nexport default {\n  name: 'SearchBar',\n  data() {\n    return {\n      searchQuery: ''\n    }\n  },\n  methods: {\n    ...mapActions({\n      searchMovies: 'movies/searchMovies'\n    }),\n    async search() {\n      if (this.searchQuery.trim()) {\n        // Exécuter l'action de recherche avec page 1\n        await this.searchMovies({ query: this.searchQuery, page: 1 });\n        \n        // Si l'utilisateur n'est pas déjà sur la page d'accueil, rediriger\n        if (this.$route.path !== '/') {\n          this.$router.push({ path: '/', query: { q: this.searchQuery } });\n        } else {\n          // Mettre à jour l'URL avec le paramètre de recherche sans recharger la page\n          this.$router.replace({ query: { q: this.searchQuery } });\n        }\n      }\n    }\n  },\n  async created() {\n    // Récupérer la recherche depuis l'URL si elle existe\n    const queryParam = this.$route.query.q;\n    if (queryParam) {\n      this.searchQuery = queryParam;\n      \n      // Exécuter la recherche automatiquement si on est sur la page d'accueil\n      if (this.$route.path === '/') {\n        await this.searchMovies({ query: this.searchQuery, page: 1 });\n      }\n    }\n  },\n  watch: {\n    // Surveiller les changements dans l'URL et mettre à jour la barre de recherche\n    '$route.query.q'(newQuery) {\n      if (newQuery) {\n        this.searchQuery = newQuery;\n      } else {\n        // Réinitialiser la recherche si le paramètre est supprimé\n        this.searchQuery = '';\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.search-bar {\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\n.search-input {\n  flex: 1;\n  padding: 0.6rem 1rem;\n  border: none;\n  border-radius: 4px 0 0 4px;\n  font-size: 1rem;\n  outline: none;\n}\n\n.search-button {\n  background-color: #e50914;\n  color: white;\n  border: none;\n  padding: 0.6rem 1rem;\n  border-radius: 0 4px 4px 0;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.search-button:hover {\n  background-color: #b2070f;\n}\n\n.search-icon {\n  font-size: 1.1rem;\n}\n</style>"],"mappings":";AAgBA,SAASA,UAAS,QAAS,MAAK;AAEhC,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE;IACf;EACF,CAAC;EACDC,OAAO,EAAE;IACP,GAAGJ,UAAU,CAAC;MACZK,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,MAAMC,MAAMA,CAAA,EAAG;MACb,IAAI,IAAI,CAACH,WAAW,CAACI,IAAI,CAAC,CAAC,EAAE;QAC3B;QACA,MAAM,IAAI,CAACF,YAAY,CAAC;UAAEG,KAAK,EAAE,IAAI,CAACL,WAAW;UAAEM,IAAI,EAAE;QAAE,CAAC,CAAC;;QAE7D;QACA,IAAI,IAAI,CAACC,MAAM,CAACC,IAAG,KAAM,GAAG,EAAE;UAC5B,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;YAAEF,IAAI,EAAE,GAAG;YAAEH,KAAK,EAAE;cAAEM,CAAC,EAAE,IAAI,CAACX;YAAY;UAAE,CAAC,CAAC;QAClE,OAAO;UACL;UACA,IAAI,CAACS,OAAO,CAACG,OAAO,CAAC;YAAEP,KAAK,EAAE;cAAEM,CAAC,EAAE,IAAI,CAACX;YAAY;UAAE,CAAC,CAAC;QAC1D;MACF;IACF;EACF,CAAC;EACD,MAAMa,OAAOA,CAAA,EAAG;IACd;IACA,MAAMC,UAAS,GAAI,IAAI,CAACP,MAAM,CAACF,KAAK,CAACM,CAAC;IACtC,IAAIG,UAAU,EAAE;MACd,IAAI,CAACd,WAAU,GAAIc,UAAU;;MAE7B;MACA,IAAI,IAAI,CAACP,MAAM,CAACC,IAAG,KAAM,GAAG,EAAE;QAC5B,MAAM,IAAI,CAACN,YAAY,CAAC;UAAEG,KAAK,EAAE,IAAI,CAACL,WAAW;UAAEM,IAAI,EAAE;QAAE,CAAC,CAAC;MAC/D;IACF;EACF,CAAC;EACDS,KAAK,EAAE;IACL;IACA,gBAAgBC,CAACC,QAAQ,EAAE;MACzB,IAAIA,QAAQ,EAAE;QACZ,IAAI,CAACjB,WAAU,GAAIiB,QAAQ;MAC7B,OAAO;QACL;QACA,IAAI,CAACjB,WAAU,GAAI,EAAE;MACvB;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}