{"ast":null,"code":"// src/services/auth.service.js\n// import api from './api'; // Commenté car non utilisé dans la simulation\n\n// Durée de validité du token (en millisecondes)\nconst TOKEN_VALIDITY = 24 * 60 * 60 * 1000; // 24 heures\n\nclass AuthService {\n  /**\n   * Connecte un utilisateur et stocke ses informations et son token\n   * @param {object} credentials - Identifiants de connexion (email, password)\n   * @returns {Promise} - Réponse de l'API\n   */\n  async login(credentials) {\n    // Simuler une connexion réussie pour tester\n    console.log('Simulation de connexion avec', credentials);\n    const mockUser = {\n      id: credentials.email.toLowerCase().replace(/@.*$/, ''),\n      // Générer un ID basé sur l'email\n      email: credentials.email,\n      name: 'Utilisateur ' + credentials.email.split('@')[0]\n    };\n    const mockResponse = {\n      user: mockUser,\n      token: 'fake-jwt-token-' + Date.now()\n    };\n\n    // Stocker les données correctement\n    this.setToken(mockResponse.token);\n    this.setUser(mockUser);\n    return mockResponse;\n  }\n\n  /**\n   * Inscrit un nouvel utilisateur\n   * @param {object} userData - Données d'inscription (nom, email, password, etc.)\n   * @returns {Promise} - Réponse de l'API\n   */\n  async register(userData) {\n    try {\n      // Simuler une inscription réussie pour tester\n      console.log('Simulation d\\'inscription avec', userData);\n      const mockUser = {\n        id: userData.email.toLowerCase().replace(/@.*$/, ''),\n        // Générer un ID basé sur l'email\n        email: userData.email,\n        name: userData.username || userData.name || 'Nouvel Utilisateur'\n      };\n      const mockResponse = {\n        user: mockUser,\n        token: 'fake-jwt-token-' + Date.now()\n      };\n\n      // Stocker les données correctement\n      this.setToken(mockResponse.token);\n      this.setUser(mockUser);\n      return mockResponse;\n    } catch (error) {\n      console.error('Erreur d\\'inscription:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Déconnecte l'utilisateur courant\n   */\n  logout() {\n    localStorage.removeItem('user_token');\n    localStorage.removeItem('user_data');\n\n    // Notifier l'API de la déconnexion si nécessaire\n    try {\n      // api.post('/api/auth/logout');\n      console.log('Déconnexion simulée');\n    } catch (error) {\n      console.warn('Erreur lors de la déconnexion côté serveur:', error);\n    }\n  }\n\n  /**\n   * Vérifie si l'utilisateur est connecté\n   * @returns {boolean} - True si l'utilisateur est connecté\n   */\n  isAuthenticated() {\n    const token = this.getToken();\n    return !!token;\n  }\n\n  /**\n   * Stocke le token d'authentification avec sa date d'expiration\n   * @param {string} token - Token d'authentification\n   */\n  setToken(token) {\n    if (!token) return;\n    const tokenData = {\n      value: token,\n      expires: Date.now() + TOKEN_VALIDITY\n    };\n    localStorage.setItem('user_token', JSON.stringify(tokenData));\n  }\n\n  /**\n   * Récupère le token d'authentification s'il est valide\n   * @returns {string|null} - Token d'authentification ou null\n   */\n  getToken() {\n    const tokenData = localStorage.getItem('user_token');\n    if (!tokenData) return null;\n    try {\n      const {\n        value,\n        expires\n      } = JSON.parse(tokenData);\n\n      // Vérifier si le token a expiré\n      if (Date.now() > expires) {\n        this.logout();\n        return null;\n      }\n      return value;\n    } catch (error) {\n      console.error('Erreur lors de la récupération du token:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Stocke les données de l'utilisateur connecté\n   * @param {object} user - Données de l'utilisateur\n   */\n  setUser(user) {\n    if (!user) return;\n\n    // S'assurer que l'utilisateur a un ID\n    if (!user.id) {\n      user.id = user.email ? user.email.toLowerCase().replace(/@.*$/, '') : 'user_' + Date.now();\n    }\n\n    // Ne pas stocker de données sensibles\n    const safeUserData = {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      avatar: user.avatar\n    };\n    localStorage.setItem('user_data', JSON.stringify(safeUserData));\n  }\n\n  /**\n   * Récupère les données de l'utilisateur connecté\n   * @returns {object|null} - Données de l'utilisateur ou null\n   */\n  getUser() {\n    const userData = localStorage.getItem('user_data');\n    if (!userData) return null;\n    try {\n      return JSON.parse(userData);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des données utilisateur:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Vérifie si le token est toujours valide auprès du serveur\n   * @returns {Promise<boolean>} - True si le token est valide\n   */\n  async validateToken() {\n    const token = this.getToken();\n    if (!token) return false;\n    try {\n      // Simulation de validation\n      console.log('Simulation de validation de token');\n      return true;\n    } catch (error) {\n      console.warn('Token invalide, déconnexion de l\\'utilisateur', error);\n      this.logout();\n      return false;\n    }\n  }\n\n  /**\n   * Met à jour le profil de l'utilisateur\n   * @param {object} userData - Nouvelles données utilisateur\n   * @returns {Promise} - Réponse de l'API\n   */\n  async updateProfile(userData) {\n    try {\n      // Simuler une mise à jour réussie\n      console.log('Simulation de mise à jour du profil avec', userData);\n      const currentUser = this.getUser();\n      const updatedUser = {\n        ...currentUser,\n        ...userData,\n        id: currentUser.id // Conserver l'ID original\n      };\n      this.setUser(updatedUser);\n      return {\n        user: updatedUser\n      };\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du profil:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Change le mot de passe de l'utilisateur\n   * @param {object} _ - Ancien et nouveau mot de passe (non utilisé dans la simulation)\n   * @returns {Promise} - Réponse de l'API\n   */\n  async changePassword(_) {\n    try {\n      // Simulation de changement de mot de passe réussi\n      console.log('Simulation de changement de mot de passe');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Erreur lors du changement de mot de passe:', error);\n      throw error;\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["TOKEN_VALIDITY","AuthService","login","credentials","console","log","mockUser","id","email","toLowerCase","replace","name","split","mockResponse","user","token","Date","now","setToken","setUser","register","userData","username","error","logout","localStorage","removeItem","warn","isAuthenticated","getToken","tokenData","value","expires","setItem","JSON","stringify","getItem","parse","safeUserData","avatar","getUser","validateToken","updateProfile","currentUser","updatedUser","changePassword","_","success"],"sources":["/Users/alandelaigue/Desktop/cinema-v2/src/services/auth.service.js"],"sourcesContent":["// src/services/auth.service.js\n// import api from './api'; // Commenté car non utilisé dans la simulation\n\n// Durée de validité du token (en millisecondes)\nconst TOKEN_VALIDITY = 24 * 60 * 60 * 1000; // 24 heures\n\nclass AuthService {\n  /**\n   * Connecte un utilisateur et stocke ses informations et son token\n   * @param {object} credentials - Identifiants de connexion (email, password)\n   * @returns {Promise} - Réponse de l'API\n   */\n  async login(credentials) {\n    // Simuler une connexion réussie pour tester\n    console.log('Simulation de connexion avec', credentials);\n    \n    const mockUser = {\n      id: credentials.email.toLowerCase().replace(/@.*$/, ''), // Générer un ID basé sur l'email\n      email: credentials.email,\n      name: 'Utilisateur ' + credentials.email.split('@')[0]\n    };\n    \n    const mockResponse = {\n      user: mockUser,\n      token: 'fake-jwt-token-' + Date.now()\n    };\n    \n    // Stocker les données correctement\n    this.setToken(mockResponse.token);\n    this.setUser(mockUser);\n    \n    return mockResponse;\n  }\n\n  /**\n   * Inscrit un nouvel utilisateur\n   * @param {object} userData - Données d'inscription (nom, email, password, etc.)\n   * @returns {Promise} - Réponse de l'API\n   */\n  async register(userData) {\n    try {\n      // Simuler une inscription réussie pour tester\n      console.log('Simulation d\\'inscription avec', userData);\n      \n      const mockUser = {\n        id: userData.email.toLowerCase().replace(/@.*$/, ''), // Générer un ID basé sur l'email\n        email: userData.email,\n        name: userData.username || userData.name || 'Nouvel Utilisateur'\n      };\n      \n      const mockResponse = {\n        user: mockUser,\n        token: 'fake-jwt-token-' + Date.now()\n      };\n      \n      // Stocker les données correctement\n      this.setToken(mockResponse.token);\n      this.setUser(mockUser);\n      \n      return mockResponse;\n    } catch (error) {\n      console.error('Erreur d\\'inscription:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Déconnecte l'utilisateur courant\n   */\n  logout() {\n    localStorage.removeItem('user_token');\n    localStorage.removeItem('user_data');\n    \n    // Notifier l'API de la déconnexion si nécessaire\n    try {\n      // api.post('/api/auth/logout');\n      console.log('Déconnexion simulée');\n    } catch (error) {\n      console.warn('Erreur lors de la déconnexion côté serveur:', error);\n    }\n  }\n\n  /**\n   * Vérifie si l'utilisateur est connecté\n   * @returns {boolean} - True si l'utilisateur est connecté\n   */\n  isAuthenticated() {\n    const token = this.getToken();\n    return !!token;\n  }\n\n  /**\n   * Stocke le token d'authentification avec sa date d'expiration\n   * @param {string} token - Token d'authentification\n   */\n  setToken(token) {\n    if (!token) return;\n    \n    const tokenData = {\n      value: token,\n      expires: Date.now() + TOKEN_VALIDITY\n    };\n    \n    localStorage.setItem('user_token', JSON.stringify(tokenData));\n  }\n\n  /**\n   * Récupère le token d'authentification s'il est valide\n   * @returns {string|null} - Token d'authentification ou null\n   */\n  getToken() {\n    const tokenData = localStorage.getItem('user_token');\n    if (!tokenData) return null;\n    \n    try {\n      const { value, expires } = JSON.parse(tokenData);\n      \n      // Vérifier si le token a expiré\n      if (Date.now() > expires) {\n        this.logout();\n        return null;\n      }\n      \n      return value;\n    } catch (error) {\n      console.error('Erreur lors de la récupération du token:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Stocke les données de l'utilisateur connecté\n   * @param {object} user - Données de l'utilisateur\n   */\n  setUser(user) {\n    if (!user) return;\n    \n    // S'assurer que l'utilisateur a un ID\n    if (!user.id) {\n      user.id = user.email ? user.email.toLowerCase().replace(/@.*$/, '') : 'user_' + Date.now();\n    }\n    \n    // Ne pas stocker de données sensibles\n    const safeUserData = {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      avatar: user.avatar\n    };\n    \n    localStorage.setItem('user_data', JSON.stringify(safeUserData));\n  }\n\n  /**\n   * Récupère les données de l'utilisateur connecté\n   * @returns {object|null} - Données de l'utilisateur ou null\n   */\n  getUser() {\n    const userData = localStorage.getItem('user_data');\n    if (!userData) return null;\n    \n    try {\n      return JSON.parse(userData);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des données utilisateur:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Vérifie si le token est toujours valide auprès du serveur\n   * @returns {Promise<boolean>} - True si le token est valide\n   */\n  async validateToken() {\n    const token = this.getToken();\n    if (!token) return false;\n    \n    try {\n      // Simulation de validation\n      console.log('Simulation de validation de token');\n      return true;\n    } catch (error) {\n      console.warn('Token invalide, déconnexion de l\\'utilisateur', error);\n      this.logout();\n      return false;\n    }\n  }\n\n  /**\n   * Met à jour le profil de l'utilisateur\n   * @param {object} userData - Nouvelles données utilisateur\n   * @returns {Promise} - Réponse de l'API\n   */\n  async updateProfile(userData) {\n    try {\n      // Simuler une mise à jour réussie\n      console.log('Simulation de mise à jour du profil avec', userData);\n      \n      const currentUser = this.getUser();\n      const updatedUser = {\n        ...currentUser,\n        ...userData,\n        id: currentUser.id // Conserver l'ID original\n      };\n      \n      this.setUser(updatedUser);\n      \n      return { user: updatedUser };\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du profil:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Change le mot de passe de l'utilisateur\n   * @param {object} _ - Ancien et nouveau mot de passe (non utilisé dans la simulation)\n   * @returns {Promise} - Réponse de l'API\n   */\n  async changePassword(_) {\n    try {\n      // Simulation de changement de mot de passe réussi\n      console.log('Simulation de changement de mot de passe');\n      return { success: true };\n    } catch (error) {\n      console.error('Erreur lors du changement de mot de passe:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}